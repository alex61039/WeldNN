//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer.Welding
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WeldingContext : DbContext
    {
        public WeldingContext()
            : base("name=WeldingContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Alert> Alerts { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<InboxMessage> InboxMessages { get; set; }
        public virtual DbSet<InboxNotification> InboxNotifications { get; set; }
        public virtual DbSet<LogAction> LogActions { get; set; }
        public virtual DbSet<LogActionItem> LogActionItems { get; set; }
        public virtual DbSet<MailAttachment> MailAttachments { get; set; }
        public virtual DbSet<Maintenance> Maintenances { get; set; }
        public virtual DbSet<MeasureUnit> MeasureUnits { get; set; }
        public virtual DbSet<NetworkDevice> NetworkDevices { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<OrganizationUnit> OrganizationUnits { get; set; }
        public virtual DbSet<QueuePushEvent> QueuePushEvents { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Survey> Surveys { get; set; }
        public virtual DbSet<SurveyPass> SurveyPasses { get; set; }
        public virtual DbSet<SurveyPassQuestionAnswer> SurveyPassQuestionAnswers { get; set; }
        public virtual DbSet<SurveyQuestion> SurveyQuestions { get; set; }
        public virtual DbSet<SurveyQuestionOption> SurveyQuestionOptions { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Translation> Translations { get; set; }
        public virtual DbSet<WeldingMachineType> WeldingMachineTypes { get; set; }
        public virtual DbSet<WeldingMaterialType> WeldingMaterialTypes { get; set; }
        public virtual DbSet<UserPermission> UserPermissions { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UserRolePermission> UserRolePermissions { get; set; }
        public virtual DbSet<Parameter> Parameters { get; set; }
        public virtual DbSet<Dump> Dumps { get; set; }
        public virtual DbSet<ObjectUpdate> ObjectUpdates { get; set; }
        public virtual DbSet<WeldingLimitProgramParameter> WeldingLimitProgramParameters { get; set; }
        public virtual DbSet<WeldingLimitProgramHistory> WeldingLimitProgramHistories { get; set; }
        public virtual DbSet<WeldingLimitProgramHistoryParameter> WeldingLimitProgramHistoryParameters { get; set; }
        public virtual DbSet<DetailAssemblyType> DetailAssemblyTypes { get; set; }
        public virtual DbSet<DetailPart> DetailParts { get; set; }
        public virtual DbSet<DetailPartType> DetailPartTypes { get; set; }
        public virtual DbSet<WeldingAssemblyInstruction> WeldingAssemblyInstructions { get; set; }
        public virtual DbSet<WeldingAssemblyControl> WeldingAssemblyControls { get; set; }
        public virtual DbSet<WeldingAssemblyControlResult> WeldingAssemblyControlResults { get; set; }
        public virtual DbSet<UserAct> UserActs { get; set; }
        public virtual DbSet<WeldingDetailAssemblyTask> WeldingDetailAssemblyTasks { get; set; }
        public virtual DbSet<WeldingDetailAssemblyTaskState> WeldingDetailAssemblyTaskStates { get; set; }
        public virtual DbSet<DetailAssembly> DetailAssemblies { get; set; }
        public virtual DbSet<WeldingLimitProgramSchedule> WeldingLimitProgramSchedules { get; set; }
        public virtual DbSet<QueueTask> QueueTasks { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<LibraryDocument> LibraryDocuments { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<WeldingMachineParameterValue> WeldingMachineParameterValues { get; set; }
        public virtual DbSet<WeldingMaterial> WeldingMaterials { get; set; }
        public virtual DbSet<UserAccountSession> UserAccountSessions { get; set; }
        public virtual DbSet<UserToken> UserTokens { get; set; }
        public virtual DbSet<WeldingLimitProgram> WeldingLimitPrograms { get; set; }
        public virtual DbSet<WeldingMachine> WeldingMachines { get; set; }
        public virtual DbSet<Mail> Mails { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
        public virtual DbSet<WeldingMachineState> WeldingMachineStates { get; set; }
        public virtual DbSet<vWeldingMachineParameterValueNOLOCK> vWeldingMachineParameterValueNOLOCKs { get; set; }
        public virtual DbSet<vWeldingMachineStateNOLOCK> vWeldingMachineStateNOLOCKs { get; set; }
        public virtual DbSet<vStatePropValue> vStatePropValues { get; set; }
    
        public virtual ObjectResult<UserAccount> AuthenticateUser(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserAccount>("AuthenticateUser", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<UserAccount> AuthenticateUser(string userName, string password, MergeOption mergeOption)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserAccount>("AuthenticateUser", mergeOption, userNameParameter, passwordParameter);
        }
    
        public virtual int ChangePassword(Nullable<int> userAccountID, string passwordSalt, string password)
        {
            var userAccountIDParameter = userAccountID.HasValue ?
                new ObjectParameter("UserAccountID", userAccountID) :
                new ObjectParameter("UserAccountID", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangePassword", userAccountIDParameter, passwordSaltParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCurrentWeldingLimitProgram(Nullable<int> weldingMachineID)
        {
            var weldingMachineIDParameter = weldingMachineID.HasValue ?
                new ObjectParameter("WeldingMachineID", weldingMachineID) :
                new ObjectParameter("WeldingMachineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCurrentWeldingLimitProgram", weldingMachineIDParameter);
        }
    
        public virtual int UpdateUserAccountSession(Nullable<int> userAccountID, Nullable<int> expirationSeconds)
        {
            var userAccountIDParameter = userAccountID.HasValue ?
                new ObjectParameter("UserAccountID", userAccountID) :
                new ObjectParameter("UserAccountID", typeof(int));
    
            var expirationSecondsParameter = expirationSeconds.HasValue ?
                new ObjectParameter("ExpirationSeconds", expirationSeconds) :
                new ObjectParameter("ExpirationSeconds", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserAccountSession", userAccountIDParameter, expirationSecondsParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> EdmGetMachineWorkingTime(Nullable<int> weldingMachineID, Nullable<System.DateTime> datetimeFrom, Nullable<System.DateTime> datetimeTo)
        {
            var weldingMachineIDParameter = weldingMachineID.HasValue ?
                new ObjectParameter("WeldingMachineID", weldingMachineID) :
                new ObjectParameter("WeldingMachineID", typeof(int));
    
            var datetimeFromParameter = datetimeFrom.HasValue ?
                new ObjectParameter("DatetimeFrom", datetimeFrom) :
                new ObjectParameter("DatetimeFrom", typeof(System.DateTime));
    
            var datetimeToParameter = datetimeTo.HasValue ?
                new ObjectParameter("DatetimeTo", datetimeTo) :
                new ObjectParameter("DatetimeTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("EdmGetMachineWorkingTime", weldingMachineIDParameter, datetimeFromParameter, datetimeToParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> EdmGetMachineWorkingTimeSinceLastService(Nullable<int> weldingMachineID, Nullable<System.DateTime> datetime)
        {
            var weldingMachineIDParameter = weldingMachineID.HasValue ?
                new ObjectParameter("WeldingMachineID", weldingMachineID) :
                new ObjectParameter("WeldingMachineID", typeof(int));
    
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("Datetime", datetime) :
                new ObjectParameter("Datetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("EdmGetMachineWorkingTimeSinceLastService", weldingMachineIDParameter, datetimeParameter);
        }
    
        public virtual ObjectResult<Report_General_Result> Report_General(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> userAccountID, Nullable<int> organizationUnitID, Nullable<int> weldingMachineID)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var userAccountIDParameter = userAccountID.HasValue ?
                new ObjectParameter("UserAccountID", userAccountID) :
                new ObjectParameter("UserAccountID", typeof(int));
    
            var organizationUnitIDParameter = organizationUnitID.HasValue ?
                new ObjectParameter("OrganizationUnitID", organizationUnitID) :
                new ObjectParameter("OrganizationUnitID", typeof(int));
    
            var weldingMachineIDParameter = weldingMachineID.HasValue ?
                new ObjectParameter("WeldingMachineID", weldingMachineID) :
                new ObjectParameter("WeldingMachineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_General_Result>("Report_General", dateFromParameter, dateToParameter, userAccountIDParameter, organizationUnitIDParameter, weldingMachineIDParameter);
        }
    }
}
